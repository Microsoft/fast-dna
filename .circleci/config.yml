# Validate this file using
# $ circleci config validate -c .circleci/config.yml
# Reference url: https://circleci.com/blog/circleci-hacks-validate-circleci-config-on-every-commit-with-a-git-hook/
aliases:
  container_config: &container_config
    docker:
        - image: circleci/node:latest
    working_directory: ~/fast-dna

# Publishing alias
  # npm_auth: &npm_auth
  #   run:
  #     name: Authenticate with registry
  #     command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > ~/.npmrc

version: 2
jobs:
  build_and_unit_test:
    <<: *container_config
    steps:
      - checkout

      # Load installed dependencies from cache if possible, bundle install then save cache
      # Multiple caches are used to increase the chance of a cache hit
      - restore_cache:
          keys:
          - dependency-v1-{{ .Branch }}--{{ checksum "package-lock.json" }}          
          - dependency-v1-{{ .Branch }}--
          - dependency-v1-
        
      - run:
          name: Install the latest NPM version and patches
          command: |
            sudo npm i npm@latest -g
            npm update rc --depth 4
      - run:
          name: Install the latest Lerna version
          command: |
            sudo npm i lerna@^3.0.6 -g
      - run:
          name: Install all dependency packages
          command: |
            npm i
      - run:
          name: Execute Lerna bootstrap
          command: |
            lerna bootstrap
      - run: 
          name: Unit Test all packages
          command: |
            lerna run test --stream

      # Save dependencies into cache
      - save_cache:
          paths:
            - ~/fast-dna/node_modules
            - ~/fast-dna/packages/**/node_modules
            - /usr/local/lib/node_modules
          key: dependency-v1-{{ .Branch }}--{{ checksum "package-lock.json" }}
       
  test_code_coverage:
    <<: *container_config
    steps:
      # Load installed dependencies from cache if possible, bundle install then save cache
      # Multiple caches are used to increase the chance of a cache hit
      - restore_cache:
          keys:
          - dependency-v1-{{ .Branch }}--{{ checksum "package-lock.json" }}          
          - dependency-v1-{{ .Branch }}--
          - dependency-v1-
      - run:
          name: Setup and execute Code Climate reporter
          command: |
            if [ ! -f ./coverage/cc-test-reporter ]; then
              mkdir -p coverage/
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./coverage/cc-test-reporter
              chmod +x ./coverage/cc-test-reporter
            fi

            # Notify Code Climate that a build is about to start
            ./coverage/cc-test-reporter before-build

            for f in packages/*; do
              if [ -d "$f" ]; then
                echo $f
                set +e
                if [ -d "$f/coverage" ]; then
                  ./coverage/cc-test-reporter format-coverage -t lcov -o coverage/coverage.${f//\//-}.json $f/coverage/lcov.info
                fi
              fi
            done;

            ./coverage/cc-test-reporter sum-coverage -o coverage/coverage.total.json coverage/coverage.*.json
            ./coverage/cc-test-reporter upload-coverage -i coverage/coverage.total.json
            # ./coverage/cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
      # Save dependencies into cache
      - save_cache:
          paths:
            - ~/fast-dna/node_modules
            - ~/fast-dna/packages/**/node_modules
            - /usr/local/lib/node_modules
            - ~/fast-dna/packages/**/coverage
          key: dependency-v1-{{ .Branch }}--{{ checksum "package-lock.json" }}
          
workflows:
  version: 2
  build_test_coverage:
    jobs:
      - build_and_unit_test
      - test_code_coverage:
          requires:
            - build_and_unit_test

  # schedule-nightly-workflow:
  #   triggers:
  #     - schedule:
  #         cron: "0 0 * * *"
  #         filters:
  #           branches:
  #             only:
  #               - master
  #   jobs:
  #     - build
  #     - test:
  #         requires:
  #           - build
   #   - regress:
   #       requires:
   #         - build
   #         - test

            # Steps that need further wired out
              # regress
              # deploy
              # publish


# - run:
#   name: Install Browser Stack and Set Up Tunnel
#   background: true
#   command: |
#     # Download the browserstack binary file to create a tunnel
#     - wget "https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip"
#     # Unzip the browserstack binary file
#     - unzip BrowserStackLocal-linux-x64.zip
#     # Run the file with your access key
#     - ./BrowserStackLocal $BROWSERSTACK KEY:
#         background: true

